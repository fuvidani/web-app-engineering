{
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "https://localhost:8443/"
    }
  ],
  "info": {
    "description": "This is the API specification of the Healthbook backend.",
    "version": "1.0-SNAPSHOT",
    "title": "WAECM Healthbook",
    "contact": {
      "email": "daniel.fuevesi@tuwien.ac.at"
    },
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "tags": [
    {
      "name": "auth",
      "description": "Authenticating a user"
    },
    {
      "name": "user",
      "description": "User operations"
    },
    {
      "name": "medicalInformation",
      "description": "Manage medical information"
    },
    {
      "name": "medicalQuery",
      "description": "Manage medical queries, permissions"
    },
    {
      "name": "swagger",
      "description": "obtain API documentation"
    }
  ],
  "paths": {
    "/auth": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Authenticate and obtain a token",
        "description": "Provide valid e-mail address and password. The response will contain a JWT token which you should provide on subsequent invocations.",
        "operationId": "auth",
        "responses": {
          "200": {
            "description": "Successful login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Invalid Credentials"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRequest"
              }
            }
          },
          "description": "User object consisting of an e-mail address and a password",
          "required": true
        }
      }
    },
    "/user/register": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Register as a new user",
        "description": "The new user will be registered in the backend if their e-mail address is not already in use. Use the response to log in (obtain token) and to execute further actions.",
        "operationId": "register",
        "responses": {
          "200": {
            "description": "Successful registration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbstractUser"
                }
              }
            }
          },
          "400": {
            "description": "User is invalid (empty password, ...)"
          },
          "500": {
            "description": "User with given e-mail address exists already"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "User object",
          "required": true
        }
      }
    },
    "/user/{id}/medicalInformation": {
      "post": {
        "tags": [
          "medicalInformation"
        ],
        "summary": "Create a new medical information",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the user who performs the operation"
          }
        ],
        "description": "The new user will be registered in the backend if their e-mail address is not already in use. Use the response to log in (obtain token) and to execute further actions.\n* Title of the medical information is mandatory\n* A list of tags is mandatory\n* Either provide an image or a description (or both)\n\n\n\n**ONLY END USERS CAN CALL THIS ENDPOINT.**",
        "operationId": "postMedicalInfo",
        "responses": {
          "200": {
            "description": "Information successfully stored",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalInformation"
                }
              }
            }
          },
          "400": {
            "description": "MedicalInformation is invalid &#58; title missing, tags missing, neither image nor description provided"
          },
          "403": {
            "description": "Trying to access this endpoint with an invalid user (or with an invalid role)"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MedicalInformation"
              }
            }
          },
          "description": "MedicalInformation object",
          "required": true
        },
        "security": [
          {
            "myAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "medicalInformation"
        ],
        "summary": "Get all medical information of user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the user who performs the operation"
          }
        ],
        "description": "Retrieves all the stored medical information of this user. **ONLY END USERS CAN CALL THIS ENDPOINT.**",
        "operationId": "getMedicalInfo",
        "responses": {
          "200": {
            "description": "Information successfully retrieved. Some note on the content-negotiation&#58; This is mainly a streaming endpoint which means you get different behaviour depending on the Accept-Header you provide. With application/json you will receive a JSON array of the object below. In contrast to that, application/stream+json separates the json objects, meaning it will flush each element. The third option is to accept a text/event-stream, which is well suited for browser clients. In this case the objects will be serialized as individual Server Sent Events and explicitly flushed after each element. The \"data\" key maps onto the json object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalInformation"
                }
              },
              "text/event-stream": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalInformation"
                }
              },
              "application/stream+json": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalInformation"
                }
              }
            }
          },
          "403": {
            "description": "Trying to access this endpoint with an invalid user (or with an invalid role)"
          }
        },
        "security": [
          {
            "myAuth": []
          }
        ]
      }
    },
    "/user/{id}/medicalInformation/shared": {
      "get": {
        "tags": [
          "medicalInformation"
        ],
        "summary": "Get all anonymized medical information shared with facility",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the research facility who performs the operation"
          }
        ],
        "description": "Retrieves all the anonymized medical information which where shared with this research facility. **ONLY RESEARCH FACILITIES CAN CALL THIS ENDPOINT.**",
        "operationId": "getSharedMedicalInfo",
        "responses": {
          "200": {
            "description": "Information successfully retrieved. Some note on the content-negotiation&#58; This is mainly a streaming endpoint which means you get different behaviour depending on the Accept-Header you provide. With application/json you will receive a JSON array of the object below. In contrast to that, application/stream+json separates the json objects, meaning it will flush each element. The third option is to accept a text/event-stream, which is well suited for browser clients. In this case the objects will be serialized as individual Server Sent Events and explicitly flushed after each element. The \"data\" key maps onto the json object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnonymizedUserInformation"
                }
              },
              "text/event-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AnonymizedUserInformation"
                }
              },
              "application/stream+json": {
                "schema": {
                  "$ref": "#/components/schemas/AnonymizedUserInformation"
                }
              }
            }
          },
          "403": {
            "description": "Trying to access this endpoint with an invalid user (or with an invalid role)"
          }
        },
        "security": [
          {
            "myAuth": []
          }
        ]
      }
    },
    "/user/{id}/medicalQuery": {
      "post": {
        "tags": [
          "medicalQuery"
        ],
        "summary": "Create a new medical query",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the research facility who performs the operation"
          }
        ],
        "description": "Stores the provided medical query.\n\n\n\n**ONLY RESEARCH FACILITIES CAN CALL THIS ENDPOINT.**",
        "operationId": "postMedicalQuery",
        "responses": {
          "200": {
            "description": "Query successfully stored",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalQuery"
                }
              }
            }
          },
          "403": {
            "description": "Trying to access this endpoint with an invalid user (or with an invalid role)"
          },
          "500": {
            "description": "MedicalQuery is invalid &#58; all of the fields (minAge, maxAge, gender, tags) are empty"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MedicalQuery"
              }
            }
          },
          "description": "MedicalQuery object",
          "required": true
        },
        "security": [
          {
            "myAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "medicalQuery"
        ],
        "summary": "Get all created medical queries of the facility",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the research facility who performs the operation"
          }
        ],
        "description": "Retrieves all the medical queries that where created by this facility up to this point. **ONLY RESEARCH FACILITIES CAN CALL THIS ENDPOINT.**",
        "operationId": "getMedicalQueries",
        "responses": {
          "200": {
            "description": "Queries successfully retrieved. Some note on the content-negotiation&#58; This is mainly a streaming endpoint which means you get different behaviour depending on the Accept-Header you provide. With application/json you will receive a JSON array of the object below. In contrast to that, application/stream+json separates the json objects, meaning it will flush each element. The third option is to accept a text/event-stream, which is well suited for browser clients. In this case the objects will be serialized as individual Server Sent Events and explicitly flushed after each element. The \"data\" key maps onto the json object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalQuery"
                }
              },
              "text/event-stream": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalQuery"
                }
              },
              "application/stream+json": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalQuery"
                }
              }
            }
          },
          "403": {
            "description": "Trying to access this endpoint with an invalid user (or with an invalid role)"
          }
        },
        "security": [
          {
            "myAuth": []
          }
        ]
      }
    },
    "/user/{id}/medicalQuery/{queryId}/shared": {
      "get": {
        "tags": [
          "medicalQuery"
        ],
        "summary": "Get anonymized user information for query",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the research facility who performs the operation"
          },
          {
            "in": "path",
            "name": "queryId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the medical query the information should be aggregated for"
          }
        ],
        "description": "For a given query (specified through queryId), the endpoint returns all the anonymized user information that have been shared by users as a stream. **ONLY RESEARCH FACILITIES CAN CALL THIS ENDPOINT.**",
        "operationId": "getSharedInformationForQuery",
        "responses": {
          "200": {
            "description": "Information successfully retrieved. Some note on the content-negotiation&#58; This is mainly a streaming endpoint which means you get different behaviour depending on the Accept-Header you provide. With application/json you will receive a JSON array of the object below. In contrast to that, application/stream+json separates the json objects, meaning it will flush each element. The third option is to accept a text/event-stream, which is well suited for browser clients. In this case the objects will be serialized as individual Server Sent Events and explicitly flushed after each element. The \"data\" key maps onto the json object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnonymizedUserInformation"
                }
              },
              "text/event-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AnonymizedUserInformation"
                }
              },
              "application/stream+json": {
                "schema": {
                  "$ref": "#/components/schemas/AnonymizedUserInformation"
                }
              }
            }
          },
          "403": {
            "description": "Trying to access this endpoint with an invalid user (or with an invalid role)"
          }
        },
        "security": [
          {
            "myAuth": []
          }
        ]
      }
    },
    "/user/{id}/medicalQuery/matching": {
      "get": {
        "tags": [
          "medicalQuery"
        ],
        "summary": "Get all queries matching user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the end user who performs the operation"
          }
        ],
        "description": "Retrieves all the medical queries that may be relevant for this user based on their shared information. **ONLY END USERS CAN CALL THIS ENDPOINT.**",
        "operationId": "getMatchingQueries",
        "responses": {
          "200": {
            "description": "Queries successfully retrieved. Some note on the content-negotiation&#58; This is mainly a streaming endpoint which means you get different behaviour depending on the Accept-Header you provide. With application/json you will receive a JSON array of the object below. In contrast to that, application/stream+json separates the json objects, meaning it will flush each element. The third option is to accept a text/event-stream, which is well suited for browser clients. In this case the objects will be serialized as individual Server Sent Events and explicitly flushed after each element. The \"data\" key maps onto the json object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelevantQueryData"
                }
              },
              "text/event-stream": {
                "schema": {
                  "$ref": "#/components/schemas/RelevantQueryData"
                }
              },
              "application/stream+json": {
                "schema": {
                  "$ref": "#/components/schemas/RelevantQueryData"
                }
              }
            }
          },
          "403": {
            "description": "Trying to access this endpoint with an invalid user (or with an invalid role)"
          }
        },
        "security": [
          {
            "myAuth": []
          }
        ]
      }
    },
    "/user/{id}/medicalQuery/permission": {
      "post": {
        "tags": [
          "medicalQuery"
        ],
        "summary": "Create a sharing permission",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the end user who performs the operation"
          }
        ],
        "description": "Creates a sharing permission, i.e. the user allows a particular medical query to obtain the (anonymized) medical information of this user.\n\n\n\n**ONLY END USERS CAN CALL THIS ENDPOINT.**",
        "operationId": "postPermission",
        "responses": {
          "200": {
            "description": "Sharing permission successfully stored",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharingPermission"
                }
              }
            }
          },
          "403": {
            "description": "Trying to access this endpoint with an invalid user (or with an invalid role)"
          },
          "500": {
            "description": "SharingPermission is invalid"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SharingPermission"
              }
            }
          },
          "description": "SharingPermission object",
          "required": true
        },
        "security": [
          {
            "myAuth": []
          }
        ]
      }
    },
    "/user/{id}/medicalQuery/permissions": {
      "post": {
        "tags": [
          "medicalQuery"
        ],
        "summary": "Create multiple sharing permissions",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the end user who performs the operation"
          }
        ],
        "description": "Creates a list of sharing permissions, i.e. the user allows a list of medical queries to obtain the (anonymized) medical information of this user.\n\n\n\n**ONLY END USERS CAN CALL THIS ENDPOINT.**",
        "operationId": "postPermissions",
        "responses": {
          "200": {
            "description": "Sharing permissions successfully stored. Some note on the content-negotiation&#58; This is mainly a streaming endpoint which means you get different behaviour depending on the Accept-Header you provide. With application/json you will receive a JSON array of the object below. In contrast to that, application/stream+json separates the json objects, meaning it will flush each element. The third option is to accept a text/event-stream, which is well suited for browser clients. In this case the objects will be serialized as individual Server Sent Events and explicitly flushed after each element. The \"data\" key maps onto the json object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfSharingPermission"
                }
              },
              "text/event-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfSharingPermission"
                }
              },
              "application/stream+json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfSharingPermission"
                }
              }
            }
          },
          "403": {
            "description": "Trying to access this endpoint with an invalid user (or with an invalid role)"
          },
          "500": {
            "description": "One or more SharingPermissions are invalid"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfSharingPermission"
              }
            }
          },
          "description": "List of SharingPermission objects",
          "required": true
        },
        "security": [
          {
            "myAuth": []
          }
        ]
      }
    },
    "/swagger": {
      "get": {
        "tags": [
          "swagger"
        ],
        "summary": "Get this API documentation",
        "description": "Returns this API documentation in Swagger JSON format.",
        "operationId": "getDocumentation",
        "responses": {
          "200": {
            "description": "Returns this documentation in Swagger JSON format"
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "components": {
    "securitySchemes": {
      "myAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "AuthRequest": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "example": "example@example.com"
          },
          "password": {
            "type": "string",
            "example": "password"
          }
        }
      },
      "AuthResponse": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyIiwicm9sZXMiOiJST0xFX1VTRVIiLCJleHAiOjE1MjE0ODExNTksImlhdCI6MTUyMTM5NDc1OX0.eDPMllIQoatJq657WEd6GMv-8I0UzsPY3CbRVVBJiOk"
          }
        }
      },
      "AbstractUser": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "id": {
            "type": "string",
            "nullable": true,
            "example": "some generated ID (caller should leave it null)"
          },
          "email": {
            "type": "string",
            "example": "example@example.com"
          },
          "password": {
            "type": "string",
            "example": "password"
          }
        }
      },
      "User": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractUser"
          },
          {
            "type": "object",
            "required": [
              "name",
              "gender",
              "birthday"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "Max Mustermann"
              },
              "gender": {
                "$ref": "#/components/schemas/Gender"
              },
              "birthday": {
                "type": "string",
                "example": "11-09-1994"
              }
            }
          }
        ]
      },
      "Gender": {
        "type": "string",
        "enum": [
          "MALE",
          "FEMALE"
        ]
      },
      "MedicalInformation": {
        "type": "object",
        "required": [
          "title",
          "description",
          "image",
          "tags"
        ],
        "properties": {
          "id": {
            "type": "string",
            "nullable": true,
            "example": "some generated ID (caller should leave it null)"
          },
          "userId": {
            "type": "string",
            "example": "ID of the user (or anonymized)"
          },
          "title": {
            "type": "string",
            "example": "My disease"
          },
          "description": {
            "type": "string",
            "example": "It hurts quite bad"
          },
          "image": {
            "type": "string",
            "example": "base64 encoded image"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "headache",
              "diarrhea",
              "dizziness"
            ]
          }
        }
      },
      "AnonymizedUserInformation": {
        "type": "object",
        "required": [
          "id",
          "medicalInformation",
          "userId",
          "birthday",
          "gender"
        ],
        "properties": {
          "id": {
            "type": "string",
            "nullable": true,
            "example": "some generated ID (caller should leave it null)"
          },
          "medicalInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MedicalInformation"
            }
          },
          "userId": {
            "type": "string",
            "example": "anonymizedUserId"
          },
          "birthday": {
            "type": "string",
            "example": "11-09-1994"
          },
          "gender": {
            "$ref": "#/components/schemas/Gender"
          }
        }
      },
      "MedicalQuery": {
        "type": "object",
        "required": [
          "name",
          "description",
          "financialOffering",
          "minAge",
          "maxAge",
          "gender",
          "tags"
        ],
        "properties": {
          "id": {
            "type": "string",
            "nullable": true,
            "example": "some generated ID (caller should leave it null)"
          },
          "researchFacilityId": {
            "type": "string",
            "example": "ID of the research facility"
          },
          "name": {
            "type": "string",
            "example": "My Medical Query"
          },
          "description": {
            "type": "string",
            "example": "Some description about my medical query"
          },
          "financialOffering": {
            "type": "number",
            "format": "double",
            "minimum": 0,
            "example": 5.5
          },
          "minAge": {
            "type": "integer",
            "minimum": 0,
            "example": 18
          },
          "maxAge": {
            "type": "integer",
            "minimum": 0,
            "example": 35
          },
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "headache",
              "diarrhea",
              "dizziness"
            ]
          }
        }
      },
      "RelevantQueryData": {
        "type": "object",
        "required": [
          "queryId",
          "queryName",
          "queryDescription",
          "queryInstituteName",
          "queryPrice",
          "medicalInfo"
        ],
        "properties": {
          "queryId": {
            "type": "string",
            "example": "ID of the query that matches user"
          },
          "queryName": {
            "type": "string",
            "example": "My Medical Query"
          },
          "queryDescription": {
            "type": "string",
            "example": "Description"
          },
          "queryInstituteName": {
            "type": "string",
            "example": "Bayer"
          },
          "queryPrice": {
            "type": "number",
            "format": "double",
            "example": 5.5
          },
          "medicalInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Pair"
            }
          }
        }
      },
      "Pair": {
        "type": "object",
        "required": [
          "first",
          "second"
        ],
        "properties": {
          "first": {
            "type": "string",
            "example": "first"
          },
          "second": {
            "type": "string",
            "example": "second"
          }
        }
      },
      "SharingPermission": {
        "type": "object",
        "required": [
          "information",
          "queryId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "nullable": true,
            "example": "some generated ID (caller should leave it null)"
          },
          "information": {
            "type": "string",
            "example": "ID of the medical information"
          },
          "queryId": {
            "type": "string",
            "example": "ID of the medical query"
          }
        }
      },
      "ListOfSharingPermission": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SharingPermission"
        }
      }
    }
  }
}